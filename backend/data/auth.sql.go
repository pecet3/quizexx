// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package data

import (
	"context"
	"database/sql"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, uuid, name, email, salt, image_url, is_draft, created_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.Salt,
			&i.ImageUrl,
			&i.IsDraft,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, name, email, salt, image_url, is_draft, created_at from users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Salt,
		&i.ImageUrl,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, uuid, name, email, salt, image_url, is_draft, created_at from users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Salt,
		&i.ImageUrl,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (uuid, name, email, salt, image_url, is_draft, created_at)
              VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
              RETURNING id, uuid, name, email, salt, image_url, is_draft, created_at
`

type InsertUserParams struct {
	Uuid     string
	Name     string
	Email    sql.NullString
	Salt     string
	ImageUrl interface{}
	IsDraft  sql.NullBool
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Uuid,
		arg.Name,
		arg.Email,
		arg.Salt,
		arg.ImageUrl,
		arg.IsDraft,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Salt,
		&i.ImageUrl,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users SET name = ? WHERE id = ?
    RETURNING id, uuid, name, email, salt, image_url, is_draft, created_at
`

type UpdateUserNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.Name, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Salt,
		&i.ImageUrl,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}
