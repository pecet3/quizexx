// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: social.sql

package data

import (
	"context"
)

const addFunFact = `-- name: AddFunFact :one
INSERT INTO fun_facts (content, topic)
VALUES (?, ?)
RETURNING id, topic, content, created_at
`

type AddFunFactParams struct {
	Content string `json:"content"`
	Topic   string `json:"topic"`
}

func (q *Queries) AddFunFact(ctx context.Context, arg AddFunFactParams) (FunFact, error) {
	row := q.db.QueryRowContext(ctx, addFunFact, arg.Content, arg.Topic)
	var i FunFact
	err := row.Scan(
		&i.ID,
		&i.Topic,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getCurrentFunFact = `-- name: GetCurrentFunFact :one
SELECT id, topic, content, created_at FROM fun_facts
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetCurrentFunFact(ctx context.Context) (FunFact, error) {
	row := q.db.QueryRowContext(ctx, getCurrentFunFact)
	var i FunFact
	err := row.Scan(
		&i.ID,
		&i.Topic,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
