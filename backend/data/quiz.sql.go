// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quiz.sql

package data

import (
	"context"
)

const addGame = `-- name: AddGame :one
INSERT INTO games (room_uuid, room_name, game_content_id)
VALUES (?, ?, ?)
RETURNING id, room_uuid, room_name, game_content_id, created_at
`

type AddGameParams struct {
	RoomUuid      string `json:"room_uuid"`
	RoomName      string `json:"room_name"`
	GameContentID int64  `json:"game_content_id"`
}

func (q *Queries) AddGame(ctx context.Context, arg AddGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, addGame, arg.RoomUuid, arg.RoomName, arg.GameContentID)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.RoomUuid,
		&i.RoomName,
		&i.GameContentID,
		&i.CreatedAt,
	)
	return i, err
}

const addGameContentRound = `-- name: AddGameContentRound :one
INSERT INTO game_content_rounds (round, question_content, correct_answer_index, game_content_id)
              VALUES (?, ?, ?, ?)
              RETURNING id, round, question_content, correct_answer_index, game_content_id
`

type AddGameContentRoundParams struct {
	Round              int64  `json:"round"`
	QuestionContent    string `json:"question_content"`
	CorrectAnswerIndex int64  `json:"correct_answer_index"`
	GameContentID      int64  `json:"game_content_id"`
}

func (q *Queries) AddGameContentRound(ctx context.Context, arg AddGameContentRoundParams) (GameContentRound, error) {
	row := q.db.QueryRowContext(ctx, addGameContentRound,
		arg.Round,
		arg.QuestionContent,
		arg.CorrectAnswerIndex,
		arg.GameContentID,
	)
	var i GameContentRound
	err := row.Scan(
		&i.ID,
		&i.Round,
		&i.QuestionContent,
		&i.CorrectAnswerIndex,
		&i.GameContentID,
	)
	return i, err
}

const addGameContents = `-- name: AddGameContents :one
insert into game_contents (uuid, user_id, max_rounds, category, gen_content, language, difficulty, content_json, created_at)
              VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
              RETURNING id, uuid, max_rounds, category, gen_content, language, difficulty, content_json, user_id, created_at
`

type AddGameContentsParams struct {
	Uuid        string `json:"uuid"`
	UserID      int64  `json:"user_id"`
	MaxRounds   int64  `json:"max_rounds"`
	Category    string `json:"category"`
	GenContent  string `json:"gen_content"`
	Language    string `json:"language"`
	Difficulty  string `json:"difficulty"`
	ContentJson string `json:"content_json"`
}

func (q *Queries) AddGameContents(ctx context.Context, arg AddGameContentsParams) (GameContent, error) {
	row := q.db.QueryRowContext(ctx, addGameContents,
		arg.Uuid,
		arg.UserID,
		arg.MaxRounds,
		arg.Category,
		arg.GenContent,
		arg.Language,
		arg.Difficulty,
		arg.ContentJson,
	)
	var i GameContent
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.MaxRounds,
		&i.Category,
		&i.GenContent,
		&i.Language,
		&i.Difficulty,
		&i.ContentJson,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const addGameRoundAction = `-- name: AddGameRoundAction :one
INSERT INTO game_round_actions (answer_id, game_content_round_id, answer_index, is_good_answer, points, game_id, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, game_content_round_id, answer_id, answer_index, is_good_answer, points, game_id, user_id, created_at
`

type AddGameRoundActionParams struct {
	AnswerID           int64 `json:"answer_id"`
	GameContentRoundID int64 `json:"game_content_round_id"`
	AnswerIndex        int64 `json:"answer_index"`
	IsGoodAnswer       bool  `json:"is_good_answer"`
	Points             int64 `json:"points"`
	GameID             int64 `json:"game_id"`
	UserID             int64 `json:"user_id"`
}

func (q *Queries) AddGameRoundAction(ctx context.Context, arg AddGameRoundActionParams) (GameRoundAction, error) {
	row := q.db.QueryRowContext(ctx, addGameRoundAction,
		arg.AnswerID,
		arg.GameContentRoundID,
		arg.AnswerIndex,
		arg.IsGoodAnswer,
		arg.Points,
		arg.GameID,
		arg.UserID,
	)
	var i GameRoundAction
	err := row.Scan(
		&i.ID,
		&i.GameContentRoundID,
		&i.AnswerID,
		&i.AnswerIndex,
		&i.IsGoodAnswer,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const addGameRoundAnswer = `-- name: AddGameRoundAnswer :one
INSERT INTO game_content_answers (is_correct, content, round_number, game_content_round_id, index_in_arr)
              VALUES (?, ?, ?, ?, ?)
              RETURNING id, is_correct, round_number, content, index_in_arr, game_content_round_id
`

type AddGameRoundAnswerParams struct {
	IsCorrect          bool   `json:"is_correct"`
	Content            string `json:"content"`
	RoundNumber        int64  `json:"round_number"`
	GameContentRoundID int64  `json:"game_content_round_id"`
	IndexInArr         int64  `json:"index_in_arr"`
}

func (q *Queries) AddGameRoundAnswer(ctx context.Context, arg AddGameRoundAnswerParams) (GameContentAnswer, error) {
	row := q.db.QueryRowContext(ctx, addGameRoundAnswer,
		arg.IsCorrect,
		arg.Content,
		arg.RoundNumber,
		arg.GameContentRoundID,
		arg.IndexInArr,
	)
	var i GameContentAnswer
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.RoundNumber,
		&i.Content,
		&i.IndexInArr,
		&i.GameContentRoundID,
	)
	return i, err
}

const addGameUser = `-- name: AddGameUser :one
INSERT INTO game_users (user_id, level, exp, games_wins, round_wins, progress)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, level, exp, games_wins, round_wins, progress, created_at
`

type AddGameUserParams struct {
	UserID    int64   `json:"user_id"`
	Level     int64   `json:"level"`
	Exp       float64 `json:"exp"`
	GamesWins int64   `json:"games_wins"`
	RoundWins int64   `json:"round_wins"`
	Progress  float64 `json:"progress"`
}

func (q *Queries) AddGameUser(ctx context.Context, arg AddGameUserParams) (GameUser, error) {
	row := q.db.QueryRowContext(ctx, addGameUser,
		arg.UserID,
		arg.Level,
		arg.Exp,
		arg.GamesWins,
		arg.RoundWins,
		arg.Progress,
	)
	var i GameUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Level,
		&i.Exp,
		&i.GamesWins,
		&i.RoundWins,
		&i.Progress,
		&i.CreatedAt,
	)
	return i, err
}

const addGameWinner = `-- name: AddGameWinner :one
INSERT INTO game_winners (points, game_id, user_id)
VALUES (?, ?, ?)
RETURNING id, points, game_id, user_id, created_at
`

type AddGameWinnerParams struct {
	Points int64 `json:"points"`
	GameID int64 `json:"game_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) AddGameWinner(ctx context.Context, arg AddGameWinnerParams) (GameWinner, error) {
	row := q.db.QueryRowContext(ctx, addGameWinner, arg.Points, arg.GameID, arg.UserID)
	var i GameWinner
	err := row.Scan(
		&i.ID,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT id, room_uuid, room_name, game_content_id, created_at FROM games
WHERE id = ?
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.RoomUuid,
		&i.RoomName,
		&i.GameContentID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameByRoomUUID = `-- name: GetGameByRoomUUID :one
SELECT id, room_uuid, room_name, game_content_id, created_at FROM games
WHERE room_uuid = ?
`

func (q *Queries) GetGameByRoomUUID(ctx context.Context, roomUuid string) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByRoomUUID, roomUuid)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.RoomUuid,
		&i.RoomName,
		&i.GameContentID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameContentAnswerByRoundIDAndIndex = `-- name: GetGameContentAnswerByRoundIDAndIndex :one
SELECT id, is_correct, round_number, content, index_in_arr, game_content_round_id FROM game_content_answers where game_content_round_id = ? and index_in_arr = ?
`

type GetGameContentAnswerByRoundIDAndIndexParams struct {
	GameContentRoundID int64 `json:"game_content_round_id"`
	IndexInArr         int64 `json:"index_in_arr"`
}

func (q *Queries) GetGameContentAnswerByRoundIDAndIndex(ctx context.Context, arg GetGameContentAnswerByRoundIDAndIndexParams) (GameContentAnswer, error) {
	row := q.db.QueryRowContext(ctx, getGameContentAnswerByRoundIDAndIndex, arg.GameContentRoundID, arg.IndexInArr)
	var i GameContentAnswer
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.RoundNumber,
		&i.Content,
		&i.IndexInArr,
		&i.GameContentRoundID,
	)
	return i, err
}

const getGameContentByID = `-- name: GetGameContentByID :one
select id, uuid, max_rounds, category, gen_content, language, difficulty, content_json, user_id, created_at from game_contents where id = ?
`

func (q *Queries) GetGameContentByID(ctx context.Context, id int64) (GameContent, error) {
	row := q.db.QueryRowContext(ctx, getGameContentByID, id)
	var i GameContent
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.MaxRounds,
		&i.Category,
		&i.GenContent,
		&i.Language,
		&i.Difficulty,
		&i.ContentJson,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameContentByUUID = `-- name: GetGameContentByUUID :one
select id, uuid, max_rounds, category, gen_content, language, difficulty, content_json, user_id, created_at from game_contents where uuid = ?
`

func (q *Queries) GetGameContentByUUID(ctx context.Context, uuid string) (GameContent, error) {
	row := q.db.QueryRowContext(ctx, getGameContentByUUID, uuid)
	var i GameContent
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.MaxRounds,
		&i.Category,
		&i.GenContent,
		&i.Language,
		&i.Difficulty,
		&i.ContentJson,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameContentRoundByID = `-- name: GetGameContentRoundByID :one
select id, round, question_content, correct_answer_index, game_content_id from game_content_rounds where id = ?
`

func (q *Queries) GetGameContentRoundByID(ctx context.Context, id int64) (GameContentRound, error) {
	row := q.db.QueryRowContext(ctx, getGameContentRoundByID, id)
	var i GameContentRound
	err := row.Scan(
		&i.ID,
		&i.Round,
		&i.QuestionContent,
		&i.CorrectAnswerIndex,
		&i.GameContentID,
	)
	return i, err
}

const getGameContentRoundsByGameContentID = `-- name: GetGameContentRoundsByGameContentID :many
SELECT id, round, question_content, correct_answer_index, game_content_id FROM game_content_rounds where game_content_id = ?
`

func (q *Queries) GetGameContentRoundsByGameContentID(ctx context.Context, gameContentID int64) ([]GameContentRound, error) {
	rows, err := q.db.QueryContext(ctx, getGameContentRoundsByGameContentID, gameContentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameContentRound
	for rows.Next() {
		var i GameContentRound
		if err := rows.Scan(
			&i.ID,
			&i.Round,
			&i.QuestionContent,
			&i.CorrectAnswerIndex,
			&i.GameContentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameContentRoundsByGameUUID = `-- name: GetGameContentRoundsByGameUUID :one
select id, round, question_content, correct_answer_index, game_content_id from game_content_rounds where game_content_id = ?
`

func (q *Queries) GetGameContentRoundsByGameUUID(ctx context.Context, gameContentID int64) (GameContentRound, error) {
	row := q.db.QueryRowContext(ctx, getGameContentRoundsByGameUUID, gameContentID)
	var i GameContentRound
	err := row.Scan(
		&i.ID,
		&i.Round,
		&i.QuestionContent,
		&i.CorrectAnswerIndex,
		&i.GameContentID,
	)
	return i, err
}

const getGameRoundAction = `-- name: GetGameRoundAction :one
SELECT id, game_content_round_id, answer_id, answer_index, is_good_answer, points, game_id, user_id, created_at FROM game_round_actions
WHERE id = ?
`

func (q *Queries) GetGameRoundAction(ctx context.Context, id int64) (GameRoundAction, error) {
	row := q.db.QueryRowContext(ctx, getGameRoundAction, id)
	var i GameRoundAction
	err := row.Scan(
		&i.ID,
		&i.GameContentRoundID,
		&i.AnswerID,
		&i.AnswerIndex,
		&i.IsGoodAnswer,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameRoundActionsByUserIDRoundIDGameID = `-- name: GetGameRoundActionsByUserIDRoundIDGameID :one
SELECT id, game_content_round_id, answer_id, answer_index, is_good_answer, points, game_id, user_id, created_at FROM game_round_actions
WHERE user_id = ? and game_content_round_id = ? and game_id = ?
`

type GetGameRoundActionsByUserIDRoundIDGameIDParams struct {
	UserID             int64 `json:"user_id"`
	GameContentRoundID int64 `json:"game_content_round_id"`
	GameID             int64 `json:"game_id"`
}

func (q *Queries) GetGameRoundActionsByUserIDRoundIDGameID(ctx context.Context, arg GetGameRoundActionsByUserIDRoundIDGameIDParams) (GameRoundAction, error) {
	row := q.db.QueryRowContext(ctx, getGameRoundActionsByUserIDRoundIDGameID, arg.UserID, arg.GameContentRoundID, arg.GameID)
	var i GameRoundAction
	err := row.Scan(
		&i.ID,
		&i.GameContentRoundID,
		&i.AnswerID,
		&i.AnswerIndex,
		&i.IsGoodAnswer,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameUser = `-- name: GetGameUser :one
SELECT id, user_id, level, exp, games_wins, round_wins, progress, created_at FROM game_users
WHERE id = ?
`

func (q *Queries) GetGameUser(ctx context.Context, id int64) (GameUser, error) {
	row := q.db.QueryRowContext(ctx, getGameUser, id)
	var i GameUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Level,
		&i.Exp,
		&i.GamesWins,
		&i.RoundWins,
		&i.Progress,
		&i.CreatedAt,
	)
	return i, err
}

const getGameUserByUserID = `-- name: GetGameUserByUserID :one
SELECT id, user_id, level, exp, games_wins, round_wins, progress, created_at FROM game_users
WHERE user_id = ?
`

func (q *Queries) GetGameUserByUserID(ctx context.Context, userID int64) (GameUser, error) {
	row := q.db.QueryRowContext(ctx, getGameUserByUserID, userID)
	var i GameUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Level,
		&i.Exp,
		&i.GamesWins,
		&i.RoundWins,
		&i.Progress,
		&i.CreatedAt,
	)
	return i, err
}

const getGameWinner = `-- name: GetGameWinner :one
SELECT id, points, game_id, user_id, created_at FROM game_winners
WHERE id = ?
`

func (q *Queries) GetGameWinner(ctx context.Context, id int64) (GameWinner, error) {
	row := q.db.QueryRowContext(ctx, getGameWinner, id)
	var i GameWinner
	err := row.Scan(
		&i.ID,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getGameWinnersByGameID = `-- name: GetGameWinnersByGameID :many
SELECT id, points, game_id, user_id, created_at FROM game_winners
WHERE game_id = ?
`

func (q *Queries) GetGameWinnersByGameID(ctx context.Context, gameID int64) ([]GameWinner, error) {
	rows, err := q.db.QueryContext(ctx, getGameWinnersByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameWinner
	for rows.Next() {
		var i GameWinner
		if err := rows.Scan(
			&i.ID,
			&i.Points,
			&i.GameID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET room_uuid = ?, room_name = ?, game_content_id = ?
WHERE id = ?
RETURNING id, room_uuid, room_name, game_content_id, created_at
`

type UpdateGameParams struct {
	RoomUuid      string `json:"room_uuid"`
	RoomName      string `json:"room_name"`
	GameContentID int64  `json:"game_content_id"`
	ID            int64  `json:"id"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, updateGame,
		arg.RoomUuid,
		arg.RoomName,
		arg.GameContentID,
		arg.ID,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.RoomUuid,
		&i.RoomName,
		&i.GameContentID,
		&i.CreatedAt,
	)
	return i, err
}

const updateGameRoundAction = `-- name: UpdateGameRoundAction :one
UPDATE game_round_actions
SET answer_id = ?, points = ?, game_id = ?, user_id = ?
WHERE id = ?
RETURNING id, game_content_round_id, answer_id, answer_index, is_good_answer, points, game_id, user_id, created_at
`

type UpdateGameRoundActionParams struct {
	AnswerID int64 `json:"answer_id"`
	Points   int64 `json:"points"`
	GameID   int64 `json:"game_id"`
	UserID   int64 `json:"user_id"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateGameRoundAction(ctx context.Context, arg UpdateGameRoundActionParams) (GameRoundAction, error) {
	row := q.db.QueryRowContext(ctx, updateGameRoundAction,
		arg.AnswerID,
		arg.Points,
		arg.GameID,
		arg.UserID,
		arg.ID,
	)
	var i GameRoundAction
	err := row.Scan(
		&i.ID,
		&i.GameContentRoundID,
		&i.AnswerID,
		&i.AnswerIndex,
		&i.IsGoodAnswer,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const updateGameUser = `-- name: UpdateGameUser :one
UPDATE game_users
SET level = ?, exp = ?, games_wins = ?, round_wins = ?, progress = ?
WHERE id = ?
RETURNING id, user_id, level, exp, games_wins, round_wins, progress, created_at
`

type UpdateGameUserParams struct {
	Level     int64   `json:"level"`
	Exp       float64 `json:"exp"`
	GamesWins int64   `json:"games_wins"`
	RoundWins int64   `json:"round_wins"`
	Progress  float64 `json:"progress"`
	ID        int64   `json:"id"`
}

func (q *Queries) UpdateGameUser(ctx context.Context, arg UpdateGameUserParams) (GameUser, error) {
	row := q.db.QueryRowContext(ctx, updateGameUser,
		arg.Level,
		arg.Exp,
		arg.GamesWins,
		arg.RoundWins,
		arg.Progress,
		arg.ID,
	)
	var i GameUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Level,
		&i.Exp,
		&i.GamesWins,
		&i.RoundWins,
		&i.Progress,
		&i.CreatedAt,
	)
	return i, err
}

const updatePointsRoundAction = `-- name: UpdatePointsRoundAction :one
UPDATE game_round_actions
SET points = ?
WHERE game_id = ? and
game_content_round_id = ?
RETURNING id, game_content_round_id, answer_id, answer_index, is_good_answer, points, game_id, user_id, created_at
`

type UpdatePointsRoundActionParams struct {
	Points             int64 `json:"points"`
	GameID             int64 `json:"game_id"`
	GameContentRoundID int64 `json:"game_content_round_id"`
}

func (q *Queries) UpdatePointsRoundAction(ctx context.Context, arg UpdatePointsRoundActionParams) (GameRoundAction, error) {
	row := q.db.QueryRowContext(ctx, updatePointsRoundAction, arg.Points, arg.GameID, arg.GameContentRoundID)
	var i GameRoundAction
	err := row.Scan(
		&i.ID,
		&i.GameContentRoundID,
		&i.AnswerID,
		&i.AnswerIndex,
		&i.IsGoodAnswer,
		&i.Points,
		&i.GameID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
