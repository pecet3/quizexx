// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quiz.sql

package data

import (
	"context"
)

const addGameContentRound = `-- name: AddGameContentRound :one
INSERT INTO game_content_rounds (round, question_content, correct_answer_index, game_content_id)
              VALUES (?, ?, ?, ?)
              RETURNING id, round, question_content, correct_answer_index, game_content_id
`

type AddGameContentRoundParams struct {
	Round              int64  `json:"round"`
	QuestionContent    string `json:"question_content"`
	CorrectAnswerIndex int64  `json:"correct_answer_index"`
	GameContentID      int64  `json:"game_content_id"`
}

func (q *Queries) AddGameContentRound(ctx context.Context, arg AddGameContentRoundParams) (GameContentRound, error) {
	row := q.db.QueryRowContext(ctx, addGameContentRound,
		arg.Round,
		arg.QuestionContent,
		arg.CorrectAnswerIndex,
		arg.GameContentID,
	)
	var i GameContentRound
	err := row.Scan(
		&i.ID,
		&i.Round,
		&i.QuestionContent,
		&i.CorrectAnswerIndex,
		&i.GameContentID,
	)
	return i, err
}

const addGameContents = `-- name: AddGameContents :one
insert into game_contents (uuid, max_rounds, category, gen_content, language, difficulty, content_json, created_at)
              VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
              RETURNING id, uuid, max_rounds, category, gen_content, language, difficulty, content_json, user_id
`

type AddGameContentsParams struct {
	Uuid        string `json:"uuid"`
	MaxRounds   int64  `json:"max_rounds"`
	Category    string `json:"category"`
	GenContent  string `json:"gen_content"`
	Language    string `json:"language"`
	Difficulty  string `json:"difficulty"`
	ContentJson string `json:"content_json"`
}

func (q *Queries) AddGameContents(ctx context.Context, arg AddGameContentsParams) (GameContent, error) {
	row := q.db.QueryRowContext(ctx, addGameContents,
		arg.Uuid,
		arg.MaxRounds,
		arg.Category,
		arg.GenContent,
		arg.Language,
		arg.Difficulty,
		arg.ContentJson,
	)
	var i GameContent
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.MaxRounds,
		&i.Category,
		&i.GenContent,
		&i.Language,
		&i.Difficulty,
		&i.ContentJson,
		&i.UserID,
	)
	return i, err
}

const addGameRound = `-- name: AddGameRound :one
INSERT INTO game_content_answers (is_correct, content, game_content_round_id)
              VALUES (?, ?, ?)
              RETURNING id, is_correct, content, game_content_round_id
`

type AddGameRoundParams struct {
	IsCorrect          bool   `json:"is_correct"`
	Content            string `json:"content"`
	GameContentRoundID int64  `json:"game_content_round_id"`
}

func (q *Queries) AddGameRound(ctx context.Context, arg AddGameRoundParams) (GameContentAnswer, error) {
	row := q.db.QueryRowContext(ctx, addGameRound, arg.IsCorrect, arg.Content, arg.GameContentRoundID)
	var i GameContentAnswer
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.Content,
		&i.GameContentRoundID,
	)
	return i, err
}

const getGameContentByID = `-- name: GetGameContentByID :one
select id, uuid, max_rounds, category, gen_content, language, difficulty, content_json, user_id from game_contents where id = ?
`

func (q *Queries) GetGameContentByID(ctx context.Context, id int64) (GameContent, error) {
	row := q.db.QueryRowContext(ctx, getGameContentByID, id)
	var i GameContent
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.MaxRounds,
		&i.Category,
		&i.GenContent,
		&i.Language,
		&i.Difficulty,
		&i.ContentJson,
		&i.UserID,
	)
	return i, err
}

const getGameContentRoundByID = `-- name: GetGameContentRoundByID :one
select id, round, question_content, correct_answer_index, game_content_id from game_content_rounds where id = ?
`

func (q *Queries) GetGameContentRoundByID(ctx context.Context, id int64) (GameContentRound, error) {
	row := q.db.QueryRowContext(ctx, getGameContentRoundByID, id)
	var i GameContentRound
	err := row.Scan(
		&i.ID,
		&i.Round,
		&i.QuestionContent,
		&i.CorrectAnswerIndex,
		&i.GameContentID,
	)
	return i, err
}
